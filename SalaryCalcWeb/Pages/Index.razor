@page "/"
@using SalaryCalcWeb.Models
@using SalaryCalcWeb.Services


<EditForm Model="salaryRequestModel" style="margin-block: 2em">
    <DataAnnotationsValidator />
    <PageTitle>Salary Calculator</PageTitle>
    <h3>Salary Calculator</h3>
    <div style="margin-block: 0.2em">
        <strong>Employee:</strong>
        <select id="EmployeeId" value="salaryRequestModel.EmployeeId" @onchange="GetEmployeeParameters">
            @foreach (var employee in employees)
            {
                <option value=@employee.Id>@employee.FirstName @employee.LastName</option>
            }
        </select>
    </div>
    <div style="margin-block: 0.2em">
        <strong>Year:</strong>
        <select id="Year" value="salaryRequestModel.Year" @onchange="GetYearParameters">
            @foreach (var year in years)
            {
                <option value=@year>@year</option>
            }
        </select>
    </div>
    <div style="margin-block: 0.2em">
        <strong>Gross Salary:</strong>
        <InputNumber id="GrossSalary" @bind-Value="salaryRequestModel.GrossSalary" />
    </div>

    <button class="btn btn-primary" @onclick="Calculate">Calculate</button>
</EditForm>

@if (showResult)
{
    <EditForm Model="salary" style="margin-block: 2em">
        <h3>Calculations result</h3>
        <div style="margin-block: 0.2em">
            <strong>Net Salary:</strong>
            <InputNumber id="NetSalary" @bind-Value="salary.NetSalary" />
        </div>
        <div style="margin-block: 0.2em">
            <strong>Tax Total Income:</strong>
            <InputNumber id="TaxTotalIncome" @bind-Value="salary.TaxTotalIncome" />
        </div>
        <div style="margin-block: 0.2em">
            <strong>Tax Health and Social Insurance:</strong>
            <InputNumber id="TaxHealthAndSocialInsurance" @bind-Value="salary.TaxHealthAndSocialInsurance" />
        </div>
    </EditForm>
}

@if (showParams)
{
    <EditForm Model="parameter" OnValidSubmit="@UpdateYarParameters" style="margin-block: 2em">
        <h3>Year parameters</h3>
        <div style="margin-block: 0.2em">
            <strong>Year:</strong>
            <InputNumber id="Year" @bind-Value="parameter.Year" />
        </div>
        <div style="margin-block: 0.2em">
            <strong>Min Threshold:</strong>
            <InputNumber id="MinThreshold" @bind-Value="parameter.MinThreshold" />
        </div>
        <div style="margin-block: 0.2em">
            <strong>Total Income Tax Percentage:</strong>
            <InputNumber id="TotalIncomeTaxPercentage" @bind-Value="parameter.TotalIncomeTaxPercentage" />
        </div>
        <div style="margin-block: 0.2em">
            <strong>Health and Social Insurance Percentage:</strong>
            <InputNumber id="HealthAndSocialInsurancePercentage" @bind-Value="parameter.HealthAndSocialInsurancePercentage" />
        </div>
        <div style="margin-block: 0.2em">
            <strong>Max Threshold:</strong>
            <InputNumber id="MaxThreshold" @bind-Value="parameter.MaxThreshold" />
        </div>

        <button class="btn btn-primary" @onclick="UpdateYarParameters">Update Yar Parameters</button>
    </EditForm>
}

@code {
    [Inject] private EmployeeService EmployeeService { get; set; }
    [Inject] private ParameterService ParameterService { get; set; }
    [Inject] private SalaryService SalaryService { get; set; }

    private List<EmployeeModel> employees = new List<EmployeeModel>();
    private List<EmployeeParameterResponseModel> employeeParameters = new List<EmployeeParameterResponseModel>();
    private List<int> years = new List<int>();

    private SalaryRequestModel salaryRequestModel = new SalaryRequestModel();
    private SalaryModel salary = new SalaryModel();
    private ParameterModel parameter = new ParameterModel();

    bool showParams = false;
    bool showResult = false;

    protected override async Task OnInitializedAsync()
    {
        var result = await EmployeeService.GetEmployees();
        if (result.Count > 0)
        {
            employees.AddRange(result);
        }

        GetEmployeeParameters(new ChangeEventArgs());
    }

    private async void Calculate()
    {
        if (salary != null)
        {
            salary = await SalaryService.GetNetSalary(salaryRequestModel);
            showResult = true;
            StateHasChanged();
        }
    }

    private async void GetEmployeeParameters(ChangeEventArgs e)
    {
        var index = 0;
        if (int.TryParse((string)e.Value, out index) && index >= 0)
        {
            salaryRequestModel.EmployeeId = index;
        }
        else
        {
            index = 1;
            salaryRequestModel.EmployeeId = index;
        }

        var result = await ParameterService.GetEmployeeParameter(index);
        if (result.Count > 0)
        {
            if (employeeParameters.Count > 0) employeeParameters = new List<EmployeeParameterResponseModel>();
            employeeParameters.AddRange(result);
            SetSalary(employeeParameters.First().AnnualSalary);
            foreach (var year in employeeParameters)
            {
                if (years.Count > 0) years = new List<int>();
                years.Add(year.Year);
            }

            await GetYearParams(years.First());
            StateHasChanged();
        }
    }

    private async void GetYearParameters(ChangeEventArgs e)
    {
        int year = 0;
        if (int.TryParse((string)e.Value, out year) && year >= 0)
        {
            await GetYearParams(year);
        }
    }

    private async void UpdateYarParameters()
    {
        await ParameterService.UpdateYearParameters(parameter);
    }

    private void SetSalary(double grossSalary)
    {
        salaryRequestModel.GrossSalary = grossSalary;
        StateHasChanged();
    }

    private async Task GetYearParams(int year)
    {
        SetSalary(employeeParameters.Find(x => x.Year == year).AnnualSalary);

        salaryRequestModel.Year = year;
        parameter = await ParameterService.GetParameterByYear(salaryRequestModel.Year);
        if (parameter != null)
        {
            showParams = true;
        }

        StateHasChanged();
    }
}
